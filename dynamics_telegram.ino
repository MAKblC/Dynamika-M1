/*
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∞–¥—Ä–µ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏!  
*/
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

#include <Wire.h>

// –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∏
#define WIFI_SSID "XXXXX"
#define WIFI_PASSWORD "XXXXXXXXX"
// —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
#define BOT_TOKEN "XXXXXXXXXXXXXXXXXXXXXX"

const unsigned long BOT_MTBS = 1000; // –ø–µ—Ä–∏–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

WiFiClientSecure secured_client;
UniversalTelegramBot bot(BOT_TOKEN, secured_client);
unsigned long bot_lasttime;

// —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
String test_photo_url = "https://mgbot.ru/upload/logo-r.png";

// –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–º–æ—â—å—é InlineKeyboard
String keyboardJson1 = "[[{ \"text\" : \"–í–∞—à —Å–∞–π—Ç\", \"url\" : \"https://mgbot.ru\" }],[{ \"text\" : \"–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç IoTik.ru\", \"url\" : \"https://www.iotik.ru\" }]]";

#include <Adafruit_PWMServoDriver.h> // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –º–æ—Ç–æ—Ä–Ω–æ–π –ø–ª–∞—Ç—ã
Adafruit_PWMServoDriver pwm = Adafruit_PWMServoDriver(0x70); // –∞–¥—Ä–µ—Å –ø–ª–∞—Ç—ã

#include <VL53L0X.h> // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ MGS-D20
VL53L0X lox1;

// –í—ã–±–µ—Ä–∏—Ç–µ –≥–∏—Ä–æ—Å–∫–æ–ø –∏–ª–∏ –¥–∞—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ –≤ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–µ (–Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–Ω–µ—Å–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
//#define MGS_A9 1
#define MGS_CLM60 1
//#define MGS_A6 1

/////////////////// –≥–∏—Ä–æ—Å–∫–æ–ø –∏ –¥–∞—Ç—á–∏–∫ —Ü–≤–µ—Ç–∞ ///////////////////
#ifdef MGS_A9
#include <Adafruit_LSM9DS1.h>
Adafruit_LSM9DS1 lsm = Adafruit_LSM9DS1();
#endif
#ifdef MGS_A6
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
Adafruit_MPU6050 mpu;
#endif
#ifdef MGS_CLM60
#include "Adafruit_APDS9960.h"
Adafruit_APDS9960 apds9960;
#endif

// –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ –≤ –≤–∞—à–µ–π —Å–±–æ—Ä–∫–µ (–Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–Ω–µ—Å–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
#define MGL_RGB1EN 1
//#define MGL_RGB2 1
//#define MGL_RGB3 1

/////////////////// –º–æ–¥—É–ª—å —Å–≤–µ—Ç–æ–¥–∏–æ–¥–æ–≤ ///////////////////
#ifdef MGL_RGB1EN
#include "TLC59108.h" // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è MGL_RGB1
#define HW_RESET_PIN 0 // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–Ω—ã–π —Å–±—Ä–æ—Å
#define I2C_ADDR TLC59108::I2C_ADDR::BASE
TLC59108 leds(I2C_ADDR + 7); // –ë–µ–∑ –ø–µ—Ä–µ–º—ã—á–µ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è 3 –±–∏—Ç–∞ –∞–¥—Ä–µ—Å–∞
#endif
#ifdef MGL_RGB2
#include <PCA9634.h>
PCA9634 leds1(0x4D); // (—Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: https://github.com/MAKblC/Codes/tree/master/I2C%20scanner)
#endif
#ifdef MGL_RGB3
#include <PCA9634.h>
PCA9634 testModule(0x08); // (—Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: https://github.com/MAKblC/Codes/tree/master/I2C%20scanner)
#endif

#define I2C_HUB_ADDR        0x70 // –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ I2C –¥–ª—è –ø–ª–∞—Ç—ã MGB_I2C63EN
#define EN_MASK             0x08
#define DEF_CHANNEL         0x00
#define MAX_CHANNEL         0x08
// I2C –ø–æ—Ä—Ç 0x07 - –≤—ã–≤–æ–¥—ã GP16 (SDA), GP17 (SCL)
// I2C –ø–æ—Ä—Ç 0x06 - –≤—ã–≤–æ–¥—ã GP4 (SDA), GP13 (SCL)
// I2C –ø–æ—Ä—Ç 0x05 - –≤—ã–≤–æ–¥—ã GP14 (SDA), GP15 (SCL)
// I2C –ø–æ—Ä—Ç 0x04 - –≤—ã–≤–æ–¥—ã GP5 (SDA), GP23 (SCL)
// I2C –ø–æ—Ä—Ç 0x03 - –≤—ã–≤–æ–¥—ã GP18 (SDA), GP19 (SCL)

#define LONG_RANGE // —Ä–µ–∂–∏–º –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

#include <Adafruit_MCP4725.h>    // –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è MGB-BUZ1
Adafruit_MCP4725 buzzer;
int ton;
int vol1 = 4095; // –£—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ = vol1-vol2
int vol2 = 0;

void setup()
{
  Serial.begin(115200);
  delay(512);
  Serial.println();
  Serial.print("Connecting to Wifi SSID ");
  Serial.print(WIFI_SSID);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  secured_client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(500);
  }
  Serial.print("\nWiFi connected. IP address: ");
  Serial.println(WiFi.localIP());

  Wire.begin();
  pwm.begin();
  // –ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)
  pwm.setPWMFreq(100);
  // –í—Å–µ –ø–æ—Ä—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã
  pwm.setPWM(8, 0, 4096);
  pwm.setPWM(9, 0, 4096);
  pwm.setPWM(10, 0, 4096);
  pwm.setPWM(11, 0, 4096);

  setBusChannel(0x06);
#ifdef MGS_A9
  if (!lsm.begin())
  {
    Serial.println("Oops ... unable to initialize the LSM9DS1. Check your wiring!");
  }
  Serial.println("Found LSM9DS1 9DOF");
  lsm.setupAccel(lsm.LSM9DS1_ACCELRANGE_2G);
  lsm.setupMag(lsm.LSM9DS1_MAGGAIN_4GAUSS);
  lsm.setupGyro(lsm.LSM9DS1_GYROSCALE_245DPS);
#endif
#ifdef MGS_A6
 if (!mpu.begin(0x69)) { // (0x68) (—Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å: https://github.com/MAKblC/Codes/tree/master/I2C%20scanner)
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");
  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
#endif
#ifdef MGS_CLM60
  if (!apds9960.begin()) {
    Serial.println("Failed to initialize device!");
  }
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–∞—Ç—á–∏–∫–∞
  apds9960.enableColor(true);
  apds9960.enableProximity(true);
#endif

  setBusChannel(0x07); // 7–æ–π –∫–∞–Ω–∞–ª
  buzzer.begin(0x61); // –° –ø–µ—Ä–µ–º—ã—á–∫–æ–π –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç 0x60
  buzzer.setVoltage(0, false);   // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞

  setBusChannel(0x05); //5—ã–π –∫–∞–Ω–∞–ª
  lox1.init();
  lox1.setTimeout(500);

#if defined LONG_RANGE
  // lower the return signal rate limit (default is 0.25 MCPS)
  lox1.setSignalRateLimit(0.1);
  // increase laser pulse periods (defaults are 14 and 10 PCLKs)
  lox1.setVcselPulsePeriod(VL53L0X::VcselPeriodPreRange, 18);
  lox1.setVcselPulsePeriod(VL53L0X::VcselPeriodFinalRange, 14);
#endif
#if defined HIGH_SPEED
  // reduce timing budget to 20 ms (default is about 33 ms)
  lox1.setMeasurementTimingBudget(20000);
#elif defined HIGH_ACCURACY
  // increase timing budget to 200 ms
  lox1.setMeasurementTimingBudget(200000);
#endif

  setBusChannel(0x01); // –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
#ifdef MGL_RGB1EN
  leds.init(HW_RESET_PIN);
  leds.setLedOutputMode(TLC59108::LED_MODE::PWM_IND);
#endif
#ifdef MGL_RGB2
  leds1.begin();
  for (int channel = 0; channel < leds1.channelCount(); channel++)
  {
    leds1.setLedDriverMode(channel, PCA9634_LEDOFF); // –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –≤ —Ä–µ–∂–∏–º–µ 0/1
    leds1.write1(channel, 0x00); // –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –≤ —Ä–µ–∂–∏–º–µ –®–ò–ú
    delay(200);
    leds1.setLedDriverMode(channel, PCA9634_LEDPWM); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –®–ò–ú
  }
#endif
#ifdef MGL_RGB3
  testModule.begin();
  for (int channel = 0; channel < testModule.channelCount(); channel++)
  {
    testModule.setLedDriverMode(channel, PCA9634_LEDOFF); // –≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã –≤ —Ä–µ–∂–∏–º–µ 0/1
  }
  for (int channel = 0; channel < testModule.channelCount(); channel++)
  {
    testModule.setLedDriverMode(channel, PCA9634_LEDON);
    Serial.println(channel);
    delay(500);
    testModule.setLedDriverMode(channel, PCA9634_LEDOFF);
    delay(500);
  }
  for (int channel = 0; channel < testModule.channelCount(); channel++)
  {
    testModule.setLedDriverMode(channel, PCA9634_LEDPWM); // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –®–ò–ú (0-255)
  }
#endif
}

// —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
void handleNewMessages(int numNewMessages)
{
  Serial.print("handleNewMessages ");
  Serial.println(numNewMessages);

  for (int i = 0; i < numNewMessages; i++)
  {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    text.toLowerCase();
    String from_name = bot.messages[i].from_name;
    if (from_name == "")
      from_name = "Guest";

    // –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏—à–µ–¥—à–µ–π –∫–æ–º–∞–Ω–¥—ã
    if ((text == "/sensors") || (text == "sensors")) // –∏–∑–º–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    {
      setBusChannel(0x05);
      float dist = lox1.readRangeSingleMillimeters(); // —Å–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

      setBusChannel(0x06);
      String welcome = "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤:\n-------------------------------------------\n";
      welcome += "üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + String(dist, 0) + " –º–º\n";
#ifdef MGS_A9
      lsm.read(); // –¥–∞–Ω–Ω—ã–µ –≥–∏—Ä–æ—Å–∫–æ–ø–∞, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ –∏ –º–∞–≥–Ω–µ—Ç–æ–º–µ—Ç—Ä–∞
      sensors_event_t a, m, g, temp;
      lsm.getEvent(&a, &m, &g, &temp);
      welcome += "aX: " + String(a.acceleration.x, 1) + " –º/—Å^2\n";
      welcome += "aY: " + String(a.acceleration.y, 1) + " –º/—Å^2\n";
      welcome += "aZ: " + String(a.acceleration.z, 1) + " –º/—Å^2\n";
#endif
#ifdef MGS_A6
      sensors_event_t a, g, temp;
      mpu.getEvent(&a, &g, &temp);
      welcome += "aX: " + String(a.acceleration.x) + " –º/—Å^2\n";
      welcome += "aY: " + String(a.acceleration.y) + " –º/—Å^2\n";
      welcome += "aZ: " + String(a.acceleration.z) + " –º/—Å^2\n";
#endif
#ifdef MGS_CLM60
      uint16_t red_data   = 0;
      uint16_t green_data = 0;
      uint16_t blue_data  = 0;
      uint16_t clear_data = 0;
      uint16_t prox_data  = 0;
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
      while (!apds9960.colorDataReady()) {
        delay(5);
      }
      apds9960.getColorData(&red_data, &green_data, &blue_data, &clear_data);
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
      prox_data = apds9960.readProximity();
      welcome += "üü• RED   = " + String(red_data) + " \n";
      welcome += "üü© GREEN = " + String(green_data) + " \n";
      welcome += "üü¶ BLUE  = " + String(blue_data) + " \n";
#endif
      bot.sendMessage(chat_id, welcome, "Markdown");
    }

    if (text == "/photo") { // –ø–æ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
      bot.sendPhoto(chat_id, test_photo_url, "–∞ –≤–æ—Ç –∏ —Ñ–æ—Ç–∫–∞!");
    }

    if ((text == "/clockwise") || (text == "clockwise"))
    {
      motorA_setpower(0x20, true);
      motorB_setpower(0x20, true);
      bot.sendMessage(chat_id, "–ï–¥–µ–º –ø–æ —á–∞—Å–æ–≤–æ–π", "");
    }
    if ((text == "/anticlockwise") || (text == "anticlockwise"))
    {
      motorA_setpower(0x20, false);
      motorB_setpower(0x20, false);
      bot.sendMessage(chat_id, "–ï–¥–µ–º –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π", "");
    }
    if ((text == "/light") || (text == "light"))
    {
      setBusChannel(0x06);
      leds.setBrightness(6, 0x99);
      leds.setBrightness(0, 0x99);
      bot.sendMessage(chat_id, "–°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/off") || (text == "off"))
    {
      setBusChannel(0x06);
      leds.setBrightness(6, 0x00);
      leds.setBrightness(0, 0x00);
      leds.setBrightness(3, 0x00);
      leds.setBrightness(2, 0x00);
      leds.setBrightness(5, 0x00);
      bot.sendMessage(chat_id, "–°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω", "");
    }
    if ((text == "/color") || (text == "color"))
    {
      setBusChannel(0x06);
#ifdef MGL_RGB1EN
      leds.setBrightness(3, random(0, 255));
      leds.setBrightness(2, random(0, 255));
      leds.setBrightness(5, random(0, 255));
#endif
#ifdef MGL_RGB2
      leds1.write1(3, random(0, 255));
      leds1.write1(7, random(0, 255));
      leds1.write1(4, random(0, 255));
#endif
#ifdef MGL_RGB3
      testModule.write1(3, random(0, 255));
      testModule.write1(2, random(0, 255));
      testModule.write1(5, random(0, 255));
#endif
      bot.sendMessage(chat_id, "–í–∫–ª—é—á–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç", "");
    }
    if ((text == "/stop") || (text == "stop"))
    {
      bot.sendMessage(chat_id, "–ú–æ—Ç–æ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "");
      motorA_setpower(0x00, false);
      motorB_setpower(0x00, false);
    }
    if ((text == "/sound") || (text == "sound"))
    {
      bot.sendMessage(chat_id, "–ë–∏–∏–∏–ø –±—É—É–ø", "");
      setBusChannel(0x07);
      for (int i = 0; i < 400; i++) { // –∑–≤—É–∫
        buzzer.setVoltage(vol1, false);
        buzzer.setVoltage(vol2, false);
        delayMicroseconds(190);
      }
      for (int i = 0; i < 400; i++) {
        buzzer.setVoltage(vol1, false);
        buzzer.setVoltage(vol2, false);
        delayMicroseconds(500);
      }
      buzzer.setVoltage(0, false);
    }
    if (text == "/site") // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç
    {
      bot.sendMessageWithInlineKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", "", keyboardJson1);
    }
    if (text == "/options") // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ø–ª–∏—Ü–µ–π
    {
      String keyboardJson = "[[\"/light\", \"/off\"],[\"/color\",\"/sensors\"],[\"/clockwise\", \"/anticlockwise\",\"/stop\"],[\"/sound\"]]";
      bot.sendMessageWithReplyKeyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", "", keyboardJson, true);
    }

    if ((text == "/start") || (text == "start") || (text == "/help") || (text == "help")) // –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ–º–æ—â–∏
    {
      bot.sendMessage(chat_id, "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!", "");
      bot.sendMessage(chat_id, "–Ø –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ô–æ—Ç–∏–∫ 32. –ö–æ–º–∞–Ω–¥—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞", "");
      String sms = "–ö–æ–º–∞–Ω–¥—ã:\n";
      sms += "/options - –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n";
      sms += "/site - –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç\n";
      sms += "/photo - –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ\n";
      sms += "/help - –≤—ã–∑–≤–∞—Ç—å –ø–æ–º–æ—â—å\n";
      bot.sendMessage(chat_id, sms, "Markdown");
    }
  }
}

void loop() // –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
{
  if (millis() - bot_lasttime > BOT_MTBS)
  {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

    while (numNewMessages)
    {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }

    bot_lasttime = millis();
  }
}
bool setBusChannel(uint8_t i2c_channel) // —Å–º–µ–Ω–∞ I2C –ø–æ—Ä—Ç–∞
{
  if (i2c_channel >= MAX_CHANNEL)
  {
    return false;
  }
  else
  {
    Wire.beginTransmission(I2C_HUB_ADDR);
    Wire.write(i2c_channel | EN_MASK); // –¥–ª—è –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã PCA9547
   	// Wire.write(0x01 << i2c_channel); // –î–ª—è –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã PW548A
    Wire.endTransmission();
    return true;
  }
}
// –ú–æ—â–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ "A" –æ—Ç -100% –¥–æ +100% (–æ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è)
void motorA_setpower(float pwr, bool invert)
{
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–æ—Ç–æ—Ä
  if (invert)
  {
    pwr = -pwr;
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  if (pwr < -100)
  {
    pwr = -100;
  }
  if (pwr > 100)
  {
    pwr = 100;
  }
  int pwmvalue = fabs(pwr) * 40.95;
  if (pwr < 0)
  {
    pwm.setPWM(10, 0, 4096);
    pwm.setPWM(11, 0, pwmvalue);
  }
  else
  {
    pwm.setPWM(11, 0, 4096);
    pwm.setPWM(10, 0, pwmvalue);
  }
}

// –ú–æ—â–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ "B" –æ—Ç -100% –¥–æ +100% (–æ—Ç –∑–Ω–∞–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è)
void motorB_setpower(float pwr, bool invert)
{
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–æ—Ç–æ—Ä
  if (invert)
  {
    pwr = -pwr;
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
  if (pwr < -100)
  {
    pwr = -100;
  }
  if (pwr > 100)
  {
    pwr = 100;
  }
  int pwmvalue = fabs(pwr) * 40.95;
  if (pwr < 0)
  {
    pwm.setPWM(8, 0, 4096);
    pwm.setPWM(9, 0, pwmvalue);
  }
  else
  {
    pwm.setPWM(9, 0, 4096);
    pwm.setPWM(8, 0, pwmvalue);
  }
}
